#!/usr/bin/env node
/**
 *
 * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

var path = require('path');
var fs   = require('fs');
var program = require('commander');
var lib  = path.join(path.dirname(fs.realpathSync(__filename)), '../lib');
var Topdoc = require(lib + '/topdoc');

program
	.option('-s, --source <directory>', 'The css source directory.')
	.option('-d, --destination <directory>', 'The destination directory where the usage guides will be written.')
	.option('-t, --template <jade file/directory>', 'The path to the jade template file.  If it is a directory it will import all the sub files')
	.option('-p. --project <title>', 'The title for your project.  Defaults to the directory name.')
	.version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
	.parse(process.argv);

var source = program.source || 'src';
var destination = program.destination || 'docs';
var template = program.template || path.resolve(__dirname, '..', 'lib', 'template.jade');
var projectTitle = program.project || path.basename(process.cwd());
var templateData = null;

if(fs.existsSync('./package.json')) {
	var packageJSON = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
	if(packageJSON.topdoc !== null){
		var topdocData = packageJSON.topdoc;
		
		source = program.source || topdocData.source || 'src';
		destination = program.destination || topdocData.destination || 'docs';
		template = program.template || topdocData.template || path.resolve(__dirname, '..', 'lib', 'template.jade');
		if(topdocData && topdocData.templateData){
			templateData = topdocData.templateData;
		} else {
			var projectTitle = program.project || path.basename(process.cwd());
			templateData = {title: projectTitle};
		}
		
	}
}


if(!fs.existsSync(source)){
	console.log('\nCouldn\'t seem to find a source\nSpecify a source with -s, --source <directory>\n');
} else {

	var options = {
		source: source,
		destination: destination,
		template: template,
		templateData: templateData
	};

	var topdoc = new Topdoc(options);
	topdoc.generate((function(){
		console.log('Generated documentation in ' + destination);
	}).bind(destination));
}
